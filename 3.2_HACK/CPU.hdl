// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
 // Implement the CPU based on its following functionalities


    // Instruction decode
	// instruction[0] if > 0, instruction[1] if = 0, instruction[2] if < 0
	// instruction[0..2] is jump instruction for PC load
	// instruction[3..5] is specify destination to load/write; [5] is A register, [4] is D register, [3] is Memory[A]
	// instruction[6..11] is ALU instruction 
	// instruction[12] is a-bit
	// instruction[15] is state its either c/a instruction
	
	
	// Created a MyAnd chip which has the same function as an And gate but build using Nand gates.
	// Implemented a Nor gate using a combination of Or and Not gate as there is no built-in function for it


	
	Not(in=instruction[15], out=aInst); // decode A and C instruction, C instruction is instruction[15], A instruction is aInst

	MyAnd(a=instruction[15], b=instruction[3], out=writeM); // check write to memory or not (writeM)
	

// A register and input mux
	 
	MyAnd(a=instruction[5],b=instruction[15],out=aRegMuxSel);	
	Or(a=aRegMuxSel, b=aInst, out=destA);
	Mux16(a=instruction, b=aluOut, sel=aRegMuxSel, out=aRegIn);
	ARegister(in=aRegIn, load=destA, out=aReg, out[0..14]=addressM); 
	

 // D register
	
	MyAnd(a=instruction[4], b=instruction[15], out=destD);
	DRegister(in=aluOut, load=destD, out=dReg);
    

// ALU and input mux	
	
	Mux16(a=aReg,b=inM,sel=instruction[12],out=aOrMem); // A Register or Memory based on a-bit which is instruction[12]
	ALU(x=dReg ,y=aOrMem ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=aluOut, out=outM, zr=ZR ,ng=NG); //aluOut = outM | aluOut is to be reused by the circuit, outM is the actual output
 

// PC with jump test 
	//JEQ
	MyAnd(a=instruction[1],b=ZR, out=JEQ);
	
	//JLT
	MyAnd(a=instruction[2], b=NG, out=JLT);
	
	//JLE (either jeq or jlt)
	Or(a=JEQ,b=JLT, out=JLE);
	
	//JGT
	//produced a NorGate
	Nor(a=NG, b=ZR, out=GT);	// if either NG or ZR flags are 0, the output would be greater than 0

	MyAnd(a=GT, b=instruction[0], out=JGT);
	Or(a=JGT, b=JLE, out=GTorLE);
	Nand(a=instruction[15], b=GTorLE, out=pcInc);  // if c instruction is 1, then can jump, otherwise the jump bits are not valid
	//when pcInc is 1 jmp is 0 (address in pc will be incremented), else pcInc is 0, then jump will occur
	Not(in=pcInc, out=jmp);
	PC(in=aReg,load=jmp,inc=pcInc,reset=reset ,out[0..14]=pc);

}
